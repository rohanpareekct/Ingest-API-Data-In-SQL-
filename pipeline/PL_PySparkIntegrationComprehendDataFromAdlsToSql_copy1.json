{
	"name": "PL_PySparkIntegrationComprehendDataFromAdlsToSql_copy1",
	"properties": {
		"activities": [
			{
				"name": "Listoftables",
				"type": "Lookup",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_DynamicTableName",
						"type": "DatasetReference",
						"parameters": {
							"tableName": "ListOfTables"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachTable",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Listoftables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Listoftables').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "LastWatermark",
							"type": "Lookup",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"policy": {
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select * \nfrom newWatermarktable\nwhere TableName='@{item().TableName}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_FileNewWatermarkTable",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "NewWatermark",
							"type": "Lookup",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"policy": {
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT MAX(@{item().WatermarkColumn}) AS NewWaterMarkValue FROM @{item().TableName}",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_DynamicTableName",
									"type": "DatasetReference",
									"parameters": {
										"tableName": "@{item().TableName}"
									}
								}
							}
						},
						{
							"name": "CopyTabletoBlob",
							"type": "Copy",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "NewWatermark",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "LastWatermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT * FROM @{item().TableName} WHERE @{item().WatermarkColumn} > '@{activity('LastWatermark').output.firstRow.WatermarkValue}' AND @{item().WatermarkColumn} <= '@{activity('NewWatermark').output.firstRow.NewWaterMarkValue}'",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".csv"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "SqlTableDynamic",
									"type": "DatasetReference",
									"parameters": {
										"schema": "dbo",
										"table": "@{item().TableName}"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_DynamicCsvAsTableName",
									"type": "DatasetReference",
									"parameters": {
										"FolderName": "@item().TableName",
										"FileName": "@concat('Increment load-',formatDateTime(utcNow(),'yyyy-MM-dd_HHmmss'))"
									}
								}
							]
						},
						{
							"name": "UpdateWatermark",
							"type": "SqlServerStoredProcedure",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "CopyTabletoBlob",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[update_newWatermarkvalue]",
								"storedProcedureParameters": {
									"TableName": {
										"value": {
											"value": "@item().TableName",
											"type": "Expression"
										},
										"type": "Expression"
									},
									"LastModifiedtime": {
										"value": {
											"value": "@{activity('NewWatermark').output.firstRow.NewWaterMarkValue}",
											"type": "Expression"
										},
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SQLDB",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"annotations": []
	}
}